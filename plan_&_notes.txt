Plan
====
* Round out activities & devices to required functionality
  * Watch TV
  * Watch Movie
  * Watch Digital Video
  * Watch Chromecast
  * Listen to Radio
  * Listen to CD
* Implement bitmap buttons
  * extend touch buttons to handle this (e.g. flag to switch icon for text, use same offset field)
  * rendering unpressed and pressed state
  * embed image data in flash download
* Implement 'status' line
* Optimise representation of offline remote data
  * Shrink offsets to 16-bit
* Power save mode
* Wake-up via accelerometer
* USB serial download of remote data instead of UART

Work-in-progress
================
* Reduce standard library footprint but still work with semi-host printf
  * Tried this with workaround from http://mcuoneclipse.com/2014/07/12/printf-for-the-frdm-k64f-board-and-kinetis-design-studio/
    but still only prints first character

What's smart and/or novel?
==========================
* Device state tracking and changing based on activities
* Wake-up on pickup
* Programmed activity triggering on timer

Done
====
* Bump clock rate to 48MHz.
* Tried turning on compiler optimisations:
  * O2/O3 doubled the communication rate from ~3KHz to ~6KHz
  * LPC test receiver had problems reliably receiving that
* Switch to 'chip-select' mode, using a separate GPIO to signal start and end of packet
  * Simpler implementation, scope to optimise
  * LPC test receiver has problem receiving full packet when sender runs at O3 optimisations
  * Replaced interrupt version with polling - still hard to get faster speeds
* Implement timer-driven DMA of packet
  * Store packet as pre-shifted 16 bit words in memory buffer
  * Two events on timer:
    * Clear write pin and trigger one DMA cycle to load GPIO data out register (may need to be two separate events?)
    * Set write pin
  * Use DMA cycle steal mode to cause one DMA req at a time in step with timer
  * Use current PTC pin range (4-11) for data
  * Use current PTA13 pin for write
  * Ensure PTC0-2 are disabled (3, 12, 13 disabled by default - 14, 15 not present - 12, 13 not connected)
* Replaced PE GPIO code with just PE GPIO initialisation and optimised C code.
  * Ensure all bit-banging code is inline
  * Write bit toggle by single register writes (set then clear), no conditional - keep value preshifted?
  * Use BME bit field write to set byte onto multiple GPIO lines - actually slower than using FGPIO!
* Try driving DMA from PIT
  * Works, but due to error in silicon, writes twice as much
* Try driving DMA from TPM
  * Works, and achieves close to theoretical throughput:
    * DMA runs at bus clock freq (24Mhz)
    * One full byte write to TFT via DMA takes 6 cycles
    * Therefore peak transfer rate is 4Mbytes/second - which for 2-byte pixels at 240x320 is 26fps
    * Test with DMA per row achieves 21fps
    * Double buffering with CPU writes concurrently doesn't hit performance.
* Polled I2C driving LPC IR blaster
  * Works: however, LPC somehow delays the clock after 8th bit, nearly halving the actual speed possible.
* Investigate ACK delay on LPC side - caused by aggressive power-down after each I2C byte received!
  * Fixed by delaying power-down to after 4 seconds of idle
* Investigate why powered-on reset of LPC IR blaster causes it to get stuck with IR output floating...
  * Gets stuck in ISP because pin 5 is just slightly too low as circuit with pullup and transistor
    acts as a voltage divider.
  * Fixed by reducing pullup resistor value.
* Turn off internal I2C pins on LPC for lower power use
* Investigate IR blaster power use when in low power mode
  * IR blaster on PIO0_1: ~0.76ma
    * LPC itself consumes ~0.06mA
    * IR blaster consumes ~0.7mA (from pullup into LPC PIO0_1/ISP)
  * IR blaster on PIO0_0/RXD: ~0.05mA
* Keypad matrix reading via I2C.
  * Kept all I2C devices on same power rail to avoid noise
* Rig up a simple button -> IR code sending test.
  * Worked with TV on/off, and DVD off - DVD on rarely worked
* Investigated why DVD on doesn't work
  * Same code as DVD off, which does work.
  * Compared TSOP receiver response for original remote and testbed
    * Logic signals pretty much the same
    * Achieved same repeat rate, but that didn't help.
  * Tried increasing power through LEDs - didn't help.
  * Noticed that pattern below was 100% reproduceable:
    * Turn on with original remote or Harmony - works
    * Turn off with test rig - works
    * Turn on with test rig - works
    * Turn off with test rig - works
    * Turn on with test rig - fails
  * Tried sending power code twice with different toggle bits - on/off now works fine via test rig!
* SPI-driven touch screen - basic reading working
* Built IR intensity meter out of LPC1114, character LCD, IR photo-diode and op-amp
* Put backlight under GPIO control.
* Hardware: tune best IR LED circuit for intensity and power consumption via IR meter
  * Done: use TSAL6400 IR LEDs with 3.3 Ohm resistors
* Hardware: Investigate electrical issue on I2C with GPIO expander
  * Custom circuit has resolved this
* Switch to dedicated, non-PE project
* Implemented RC6 encoding for LIRC remote data
* Implemented Sony remote encoding function for LIRC remote data
* Implemented scanline renderer for: horizontal lines, vertical lines and rectangles
* Implemented touch screen median filter, calibration, SPI rate control
* Implemented touchscreen pressure approximation and use in filtering detection
* Implemented basic button framework with rendering, hit testing and button actions
* Implemented scanline renderer for text
* Implemented interrupt-driven button reading.
* Implemented interrupt-driven touchscreen reading
* Implemented icon rendering
* Implemented basic activities structure, button mappings and initial flow.
* Implemented debounce touch, and respond on release
* Implemented per-touch button text
* Implemented:
	* Compiling of remote data from source form -> binary
	* Updating of remote data over UART connection
	* Saving to on-chip flash inside application
* Implemented mechanism to embed flash data in built executable
* Increased flash data area to 32Kb; adjusted erase to cover it
* Implemented more friendly error reporting in data compile tool via exceptions
* Implemented pre & post scanline fill for rows where rendered area is narrower than overall updated bounds
* Implemented more robust error handling during download:
	* Added error check to ensure flash store size not exceeded
	* First sector erased and watermark set to zero if error found
	* Success/error status communicated to tool and reported on screen and in tool
* Implemented basic device and state management with two devices and two configuration options each
* Implemented toggle bit per device
* Refactored state changing so can switch activities without turning all devices off
  * Home activity now leaves devices unchanged - either select new activity or hit power button
* Implemented improved remote data compilation error reporting, with naming of objects
* Added third device & second activity - blu-ray player and watch movie
* Added fourth device & activities disjoint from first ones - stereo and listen to cd & radio
* Implemented parallel device state switching to minimise delays

Notes
=====
Using ProcessorExpert generated functions for setting bits on GPIO introduces significant overhead:
* Extra level of function call (register saving, etc)
* Conditional check to determine which GPIO register to write for single bit (already known in advance)
* Byte written by reading GPIO data reg, xor with new values, mask, write to GPIO toggle reg
* Does use Fast GPIO addresses, though.

Pin connections
===============
KL26Z -> Buydisplay TFT Parallel

GND		-> 1		(Ground)
P3V3	-> 2		(Power)
PTC4	-> 3		(DB0)
PTC5	-> 4		(DB1)
PTC6	-> 5		(DB2)
PTC7	-> 6		(DB3)
PTC8	-> 7		(DB4)
PTC9	-> 8		(DB5)
PTC10	-> 9		(DB6)
PTC11	-> 10		(DB7)

PTA2	-> 21		(Reset - active low)
PTA5	-> 23		(TFT Chip Select)
PTA1	-> 24		(Data/Command)
PTA13	-> 25		(Write)
P3V3	-> 26		(Read - pull high)

PTD3	-> 29		(Backlight - active high)
		
PTD4	-> 30		(Touchpad Chip Select)
PTD2	-> 31		(Touchpad interrupt - active low)
PTD7	-> 32		(Touchpad MISO)
PTD5	-> 33		(Touchpad SCL)
PTD6	-> 34		(Touchpad MOSI)

GND		-> 40		(Ground)

Other connections
=================

KL26Z SPI0 (bus clock)
	MOSI	PTC6, PTC7, PTD2, PTD3
	MISO	PTC6, PTC7, PTD2, PTD3
	SCL		PTC5
	CS		PTC4
	(not usable, as PTC4 and 5 are used for TFT Parallel)

KL26Z SPI1	(system clock)
	MOSI	PTE1, PTD6, PTD7
	MISO	PTE0, PTE1, PTD6, PTD7
	SCL		PTD5
	CS		PTD4

KL26Z I2C0	(bus clock)
	SCL		PTB0, PTB2, PTC8
	SDA		PTB1, PTB3, PTC9
	(PTC pins not usable, see above)

KL26Z I2C1	(system clock)
	SCL		PTE1, PTC1, PTC10
	SDA		PTE0, PTA4, PTC2, PTC11
	(PTC pins not usable, see above)

Suggested use:
	SPI1 using pins on PTD for touch screen.
	I2C1 using pins on PTE for switch matrix and IR blaster
	I2C0 using internal pins PTE24/25, PTD0/1 for accelerometer (I2C address 0x1d)
	PTD2    -> Touch int
	PTD3    -> Backlight
	PTB18   -> Flash SPI CS

Other hardware:
	Light sensor: ADC0_SE3 on PTE22		(on J4)
	Capacitative sensor: PTB16, PTB17	(no physical connector)
	(neither really usable, as they will be inside case)
	
Available for GPIO:
	PTA4, PTA12
	PTB0, PTB1, PTB2, PTB3, PTB19 
	PTE30, PTE23, PTE22, PTE21, PTE20
	
	Uses for these:
		* Switch matrix interrupt
		* Dedicated buttons
		* Power switching?
		
	Note PTE20/21 can be UART0 Tx/Rx
	Note PTE22/23 can be UART2 Tx/Rx

Image conversions
=================
PNG -> RAW:	ffmpeg -vcodec png -i image.png -vcodec rawvideo -f rawvideo -pix_fmt rgb565be image.raw
RAW -> C:   xxd -i image.raw > Sources/image.c

Encoding Remote Signals
=======================
Best to work from LIRC source - Ken Shirriff's code (https://github.com/shirriff/Arduino-IRremote) works differently 
in that bit encodings appear to be 1's complement of LIRC values (at least for RC6). Also LIRC can split up the
encoded data into 'pre-data', 'data' and 'post-data' - while Ken's code just uses an integer and bit count for
the whole. Interestingly the SB-Projects IR site (http://www.sbprojects.com/knowledge/ir/rc6.php) for RC6 matches 
Ken's code, which is the inverse of LIRC.

IR Signal Interference
======================
If some codes for different devices are sent too close together, the devices can behave incorrectly:
* E.g. sending Sony TV KEY_POWER too close to Phillips HTS KEY_POWER prevents the HTS turning on or off.

Optimised scanline clearing
===========================
For each scanline, track min and max X to draw in uint8_t - 2 bytes per scanline x 320 scanlines. Update when building drawlist.

On rendering each scanline, apply the following:

  if row minX > drawlist minX
     fill from drawlist minX to row minX
  if row maxX < drawlist maxX
     fill from row maxX to drawlist maxX

Unroll and double-up writes in the fill loops to optimise. Use black as colour initially.

Embed binary data
=================
Save out raw binary data from kimony.py.
Convert raw bin file to linker script via:

    cat Resources/config.bin | hexdump -v -e '"BYTE(0x" 1/1 "%02X" ")\n"' > Resources/config.ld
    cat Resources/config.bin | hexdump -v -e '4/4 "LONG(0x0%08X) " "\n"' > Resources/config.ld

Include in main linker file in relevant section.    

Conditional device option pre-actions
=====================================
Define an 'option action' type: two uint32_ts
  flags: condition
  data: offset to action OR comparison: option:8, comparison:8, value:8

Operation:
  copy device option values before changing device state
  for any option that requires action and has pre-actions:
      act flag set to true
      for each pre-action
          if condition
             set act flag based on option/comparison/value
          else if act flag
             perform corresponding IrAction
          	 act flag set to true
          	 
  this should allow basic conditional control over pre-actions.
  Does not allow for conjunctions - if multiple conditions precede an IR action, the last will determine action. 
  
Sony Stereo Remote
==================

Source:
  - band: selects tuner when on other sources ... will also turn it on. When on tuner, toggles am/fm
  - function: cycles source - tuner, md, cd, pc, opt, analog, tape
  - turn-off delay: 6 secs
  - turn-on to source change delay: 2 secs
  
Sony Blu-ray
============

Turn-on delay: 17 seconds
Turn-off delay: 5 seconds

Bitmap button support
=====================
* Make touch button flags 16 bit (better structure packing)
* Extend TouchButton to support images:
  * Extend offset data to add an array of two - [0] for unpressed [1] for pressed
  * Rendering - if image offset(s) not zero, render appropriate according to button state
* Extend image header to add type field, revise to make pixel data ptr an offset
* Implement 256 colour image rendering (new DLE type)
* Use PIL in Python to load images -> RGB, convert to 256 colour then embed binary version of header, pixel data and palette.
* Images should be referenced by name, and embedded only once

Parallel state change on devices
================================
Set up:
* Timer to track elapsed time
* Finished flag for each device, set to zero
* Delay counter for each device, set to zero
* Current option & action for each device 

Set last interation time to zero
while some devices not finished
	start iteration timing
	For each device
	  	if device not finished
		    if device counter > 0
		    	subtract last iteration time, clamped to zero
		    if device counter = 0
		    	if no more actions for this device
		    		set finished flag
		    	else
		    		if next action is not nop
		        		execute next action
		        	else set device counter to nop time
		        	advance to next action and possibly option
	end iteration timing and set last iteration time

Have to use TPM for timer as systick gets used in IR sending.
- configure TPM to use bus clock (24000000Hz) with prescale of 1, modulo 24000 to overflow every millisecond
- increment counter on interrupt for a millisecond timer

Implement this as functions in a timer module that take a TPM reg structure ptr as param.